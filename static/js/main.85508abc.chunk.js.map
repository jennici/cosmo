{"version":3,"sources":["components/Menu.js","components/ClimateChangeGraph.js","components/GlobalTemperature.js","components/GlacierSize.js","App.js","serviceWorker.js","index.js"],"names":["Menu","handleClick","props","itemId","onClick","this","active","className","co2","temp","glacier","Component","CO2Emission","state","zoomDomain","x","Date","domain","setState","emission","undefined","console","log","style","width","height","scale","containerComponent","zoomDimension","onZoomDomainChange","handleZoom","bind","data","stroke","a","Year","b","y","padding","top","left","right","bottom","brushDimension","brushDomain","onBrushDomainChange","tickFormat","getFullYear","key","GlobalTemperature","GlacierSize","App","loading","isCO2","isTemp","isGlacier","triggerCO2EmissionState","triggerGlobalTemperatureState","triggerGlacierSizeState","fetch","response","json","currentChart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85508abc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Menu extends Component {\r\n    handleClick = () => {\r\n        const { itemId, onClick } = this.props;\r\n        onClick(itemId);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { active } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"ui secondary pointing menu\">\r\n                    <button className=\"active item\" onClick={this.props.co2}>\r\n                        Global CO2 emissions\r\n                    </button>\r\n                    <button className=\"item\" onClick={this.props.temp}>\r\n                        Global Temperature\r\n                    </button>\r\n                    <button className=\"item\" onClick={this.props.glacier}>\r\n                        Glacier Size\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { \r\n    VictoryChart, \r\n    VictoryZoomContainer, \r\n    VictoryLine, \r\n    VictoryBrushContainer,\r\n    VictoryAxis \r\n} from 'victory';\r\n\r\nexport default class CO2Emission extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          zoomDomain: { x: [new Date(1990, 1, 1), new Date(2009, 1, 1)] }\r\n        };\r\n      }\r\n\r\n      handleZoom(domain) {\r\n        this.setState({ zoomDomain: domain });\r\n      }\r\n\r\n    render() {\r\n\r\n        const emission = this.props.emission;\r\n        if (emission === undefined) return <p>No data avaiable.</p>\r\n        console.log(emission)\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div className=\"ui segment\">\r\n                    <div className=\"ui two wide grid\" style={{width:\"50%\"}}>\r\n                        <VictoryChart width={600} height={470} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryZoomContainer\r\n                                    zoomDimension=\"x\"\r\n                                    zoomDomain={this.state.zoomDomain}\r\n                                    onZoomDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                            <VictoryLine\r\n                                style={{\r\n                                    data: { stroke: \"tomato\" }\r\n                                }}\r\n                                data={[\r\n                                    { a: new Date(emission.Year), b: emission[\"Gas Fuel\"] }\r\n                                ]}\r\n                                x=\"a\"\r\n                                y=\"b\"\r\n                            />\r\n\r\n                        </VictoryChart>\r\n                        <VictoryChart\r\n                            padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\r\n                            width={600} height={100} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryBrushContainer\r\n                                    brushDimension=\"x\"\r\n                                    brushDomain={this.state.zoomDomain}\r\n                                    onBrushDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                        <VictoryAxis\r\n                            tickFormat={(x) => new Date(x).getFullYear()}\r\n                        />\r\n                        <VictoryLine\r\n                            style={{\r\n                                data: { stroke: \"tomato\" }\r\n                            }}\r\n                            data={[\r\n                                { key: new Date(emission.Year), b: emission[\"Gas Fuel\"] }\r\n                \t        ]}\r\n                            x=\"key\"\r\n                            y=\"b\"\r\n                        />\r\n                        </VictoryChart>\r\n                        <VictoryChart width={600} height={470} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryZoomContainer\r\n                                    zoomDimension=\"x\"\r\n                                    zoomDomain={this.state.zoomDomain}\r\n                                    onZoomDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                            <VictoryLine\r\n                                style={{\r\n                                    data: { stroke: \"tomato\" }\r\n                                }}\r\n                                data={[\r\n                                    { a: new Date(emission.Year), b: emission[\"Gas Fuel\"] }\r\n                                ]}\r\n                                x=\"a\"\r\n                                y=\"b\"\r\n                            />\r\n\r\n                        </VictoryChart>\r\n                        <VictoryChart\r\n                            padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\r\n                            width={600} height={100} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryBrushContainer\r\n                                    brushDimension=\"x\"\r\n                                    brushDomain={this.state.zoomDomain}\r\n                                    onBrushDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                        <VictoryAxis\r\n                            tickFormat={(x) => new Date(x).getFullYear()}\r\n                        />\r\n                        <VictoryLine\r\n                            style={{\r\n                                data: { stroke: \"tomato\" }\r\n                            }}\r\n                            data={[\r\n                                { key: new Date(emission.Year), b: emission[\"Gas Fuel\"] }\r\n                \t        ]}\r\n                            x=\"key\"\r\n                            y=\"b\"\r\n                        />\r\n                        </VictoryChart>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { \r\n    VictoryChart, \r\n    VictoryZoomContainer, \r\n    VictoryLine, \r\n    VictoryBrushContainer,\r\n    VictoryAxis \r\n} from 'victory';\r\n\r\nexport default class GlobalTemperature extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          zoomDomain: { x: [new Date(1990, 1, 1), new Date(2009, 1, 1)] }\r\n        };\r\n      }\r\n\r\n      handleZoom(domain) {\r\n        this.setState({ zoomDomain: domain });\r\n      }\r\n\r\n    render() {\r\n\r\n        let emission = this.props.emission;\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"ui segment\">\r\n                    <div className=\"ui two wide grid\" style={{width:\"50%\"}}>\r\n                        <VictoryChart width={600} height={470} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryZoomContainer\r\n                                    zoomDimension=\"x\"\r\n                                    zoomDomain={this.state.zoomDomain}\r\n                                    onZoomDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                            <VictoryLine\r\n                                style={{\r\n                                    data: { stroke: \"tomato\" }\r\n                                }}\r\n                                data={[\r\n                                    //{ a: emission.Year, b: emission[\"Gas Fuel\"] },\r\n                                    { a: new Date(1987, 1, 1), b: 257 },\r\n                                    { a: new Date(1993, 1, 1), b: 345 },\r\n                                    { a: new Date(1997, 1, 1), b: 515 },\r\n                                    { a: new Date(2001, 1, 1), b: 132 },\r\n                                    { a: new Date(2005, 1, 1), b: 305 },\r\n                                    { a: new Date(2011, 1, 1), b: 270 },\r\n                                    { a: new Date(2015, 1, 1), b: 470 }\r\n                                ]}\r\n                                x=\"a\"\r\n                                y=\"b\"\r\n                            />\r\n\r\n                        </VictoryChart>\r\n                        <VictoryChart\r\n                            padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\r\n                            width={600} height={100} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryBrushContainer\r\n                                    brushDimension=\"x\"\r\n                                    brushDomain={this.state.zoomDomain}\r\n                                    onBrushDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                        <VictoryAxis\r\n                            tickFormat={(x) => new Date(x).getFullYear()}\r\n                        />\r\n                        <VictoryLine\r\n                            style={{\r\n                                data: { stroke: \"tomato\" }\r\n                            }}\r\n                            data={[\r\n                                { key: new Date(1982, 1, 1), b: 125 },\r\n                                { key: new Date(1987, 1, 1), b: 257 },\r\n                                { key: new Date(1993, 1, 1), b: 345 },\r\n                                { key: new Date(1997, 1, 1), b: 515 },\r\n                                { key: new Date(2001, 1, 1), b: 132 },\r\n                                { key: new Date(2005, 1, 1), b: 305 },\r\n                                { key: new Date(2011, 1, 1), b: 270 },\r\n                                { key: new Date(2015, 1, 1), b: 470 }\r\n                \t        ]}\r\n                            x=\"key\"\r\n                            y=\"b\"\r\n                        />\r\n                        </VictoryChart>\r\n                        <VictoryChart width={600} height={470} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryZoomContainer\r\n                                    zoomDimension=\"x\"\r\n                                    zoomDomain={this.state.zoomDomain}\r\n                                    onZoomDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                            <VictoryLine\r\n                                style={{\r\n                                    data: { stroke: \"tomato\" }\r\n                                }}\r\n                                data={[\r\n                                    { a: new Date(1982, 1, 1), b: 125 },\r\n                                    { a: new Date(1987, 1, 1), b: 257 },\r\n                                    { a: new Date(1993, 1, 1), b: 345 },\r\n                                    { a: new Date(1997, 1, 1), b: 515 },\r\n                                    { a: new Date(2001, 1, 1), b: 132 },\r\n                                    { a: new Date(2005, 1, 1), b: 305 },\r\n                                    { a: new Date(2011, 1, 1), b: 270 },\r\n                                    { a: new Date(2015, 1, 1), b: 470 }\r\n                                ]}\r\n                                x=\"a\"\r\n                                y=\"b\"\r\n                            />\r\n\r\n                        </VictoryChart>\r\n                        <VictoryChart\r\n                            padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\r\n                            width={600} height={100} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryBrushContainer\r\n                                    brushDimension=\"x\"\r\n                                    brushDomain={this.state.zoomDomain}\r\n                                    onBrushDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                        <VictoryAxis\r\n                            tickFormat={(x) => new Date(x).getFullYear()}\r\n                        />\r\n                        <VictoryLine\r\n                            style={{\r\n                                data: { stroke: \"tomato\" }\r\n                            }}\r\n                            data={[\r\n                                { key: new Date(1982, 1, 1), b: 125 },\r\n                                { key: new Date(1987, 1, 1), b: 257 },\r\n                                { key: new Date(1993, 1, 1), b: 345 },\r\n                                { key: new Date(1997, 1, 1), b: 515 },\r\n                                { key: new Date(2001, 1, 1), b: 132 },\r\n                                { key: new Date(2005, 1, 1), b: 305 },\r\n                                { key: new Date(2011, 1, 1), b: 270 },\r\n                                { key: new Date(2015, 1, 1), b: 470 }\r\n                \t        ]}\r\n                            x=\"key\"\r\n                            y=\"b\"\r\n                        />\r\n                        </VictoryChart>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { \r\n    VictoryChart, \r\n    VictoryZoomContainer, \r\n    VictoryLine, \r\n    VictoryBrushContainer,\r\n    VictoryAxis \r\n} from 'victory';\r\n\r\nexport default class GlacierSize extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          zoomDomain: { x: [new Date(1990, 1, 1), new Date(2009, 1, 1)] }\r\n        };\r\n      }\r\n\r\n      handleZoom(domain) {\r\n        this.setState({ zoomDomain: domain });\r\n      }\r\n\r\n    render() {\r\n\r\n        let emission = this.props.emission;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"ui segment\">\r\n                    <div className=\"ui two wide grid\" style={{width:\"50%\"}}>\r\n                        <VictoryChart width={600} height={470} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryZoomContainer\r\n                                    zoomDimension=\"x\"\r\n                                    zoomDomain={this.state.zoomDomain}\r\n                                    onZoomDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                            <VictoryLine\r\n                                style={{\r\n                                    data: { stroke: \"tomato\" }\r\n                                }}\r\n                                data={[\r\n                                    //{ a: emission.Year, b: emission[\"Gas Fuel\"] },\r\n                                    { a: new Date(1987, 1, 1), b: 257 },\r\n                                    { a: new Date(1993, 1, 1), b: 345 },\r\n                                    { a: new Date(1997, 1, 1), b: 515 },\r\n                                    { a: new Date(2001, 1, 1), b: 132 },\r\n                                    { a: new Date(2005, 1, 1), b: 305 },\r\n                                    { a: new Date(2011, 1, 1), b: 270 },\r\n                                    { a: new Date(2015, 1, 1), b: 470 }\r\n                                ]}\r\n                                x=\"a\"\r\n                                y=\"b\"\r\n                            />\r\n\r\n                        </VictoryChart>\r\n                        <VictoryChart\r\n                            padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\r\n                            width={600} height={100} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryBrushContainer\r\n                                    brushDimension=\"x\"\r\n                                    brushDomain={this.state.zoomDomain}\r\n                                    onBrushDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                        <VictoryAxis\r\n                            tickFormat={(x) => new Date(x).getFullYear()}\r\n                        />\r\n                        <VictoryLine\r\n                            style={{\r\n                                data: { stroke: \"tomato\" }\r\n                            }}\r\n                            data={[\r\n                                { key: new Date(1982, 1, 1), b: 125 },\r\n                                { key: new Date(1987, 1, 1), b: 257 },\r\n                                { key: new Date(1993, 1, 1), b: 345 },\r\n                                { key: new Date(1997, 1, 1), b: 515 },\r\n                                { key: new Date(2001, 1, 1), b: 132 },\r\n                                { key: new Date(2005, 1, 1), b: 305 },\r\n                                { key: new Date(2011, 1, 1), b: 270 },\r\n                                { key: new Date(2015, 1, 1), b: 470 }\r\n                \t        ]}\r\n                            x=\"key\"\r\n                            y=\"b\"\r\n                        />\r\n                        </VictoryChart>\r\n                        <VictoryChart width={600} height={470} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryZoomContainer\r\n                                    zoomDimension=\"x\"\r\n                                    zoomDomain={this.state.zoomDomain}\r\n                                    onZoomDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                            <VictoryLine\r\n                                style={{\r\n                                    data: { stroke: \"tomato\" }\r\n                                }}\r\n                                data={[\r\n                                    { a: new Date(1982, 1, 1), b: 125 },\r\n                                    { a: new Date(1987, 1, 1), b: 257 },\r\n                                    { a: new Date(1993, 1, 1), b: 345 },\r\n                                    { a: new Date(1997, 1, 1), b: 515 },\r\n                                    { a: new Date(2001, 1, 1), b: 132 },\r\n                                    { a: new Date(2005, 1, 1), b: 305 },\r\n                                    { a: new Date(2011, 1, 1), b: 270 },\r\n                                    { a: new Date(2015, 1, 1), b: 470 }\r\n                                ]}\r\n                                x=\"a\"\r\n                                y=\"b\"\r\n                            />\r\n\r\n                        </VictoryChart>\r\n                        <VictoryChart\r\n                            padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\r\n                            width={600} height={100} scale={{ x: \"time\" }}\r\n                            containerComponent={\r\n                                <VictoryBrushContainer\r\n                                    brushDimension=\"x\"\r\n                                    brushDomain={this.state.zoomDomain}\r\n                                    onBrushDomainChange={this.handleZoom.bind(this)}\r\n                                />\r\n                            }\r\n                        >\r\n                        <VictoryAxis\r\n                            tickFormat={(x) => new Date(x).getFullYear()}\r\n                        />\r\n                        <VictoryLine\r\n                            style={{\r\n                                data: { stroke: \"tomato\" }\r\n                            }}\r\n                            data={[\r\n                                { key: new Date(1982, 1, 1), b: 125 },\r\n                                { key: new Date(1987, 1, 1), b: 257 },\r\n                                { key: new Date(1993, 1, 1), b: 345 },\r\n                                { key: new Date(1997, 1, 1), b: 515 },\r\n                                { key: new Date(2001, 1, 1), b: 132 },\r\n                                { key: new Date(2005, 1, 1), b: 305 },\r\n                                { key: new Date(2011, 1, 1), b: 270 },\r\n                                { key: new Date(2015, 1, 1), b: 470 }\r\n                \t        ]}\r\n                            x=\"key\"\r\n                            y=\"b\"\r\n                        />\r\n                        </VictoryChart>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component }from 'react';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Menu from './components/Menu';\r\nimport CO2Emission from './components/ClimateChangeGraph';\r\nimport GlobalTemperature from './components/GlobalTemperature';\r\nimport GlacierSize from './components/GlacierSize';\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    emission: [], //How do we want to name our main object in the state?\r\n    loading: true,\r\n    isCO2: true,\r\n    isTemp: false,\r\n    isGlacier: false\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const url = \"https://my.api.mockaroo.com/co2.json?key=8eb9e6f0\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    this.setState({ \r\n        emission: data, \r\n        loading: false \r\n    });\r\n    console.log(this.state.emission);\r\n  } \r\n\r\n  triggerCO2EmissionState = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      isCO2: true\r\n  });\r\n}\r\n\r\ntriggerGlobalTemperatureState = () => {\r\n  this.setState({\r\n    ...this.state,\r\n    isCO2: false,\r\n    isTemp: true\r\n});\r\n}\r\n\r\ntriggerGlacierSizeState = () => {\r\n  this.setState({\r\n    ...this.state,\r\n    isCO2: false,\r\n    isGlacier: true\r\n});\r\n}\r\n\r\n  render(){\r\n\r\n  if (this.state.loading) {\r\n      return <div>loading...</div>;\r\n  }\r\n\r\n  if (!this.state.emission) {\r\n      return <div>didn't get Climate Change Graph</div>;\r\n  }\r\n\r\n    let currentChart=<CO2Emission emission={this.state.emission} />\r\n    if(this.state.isCO2)\r\n    {\r\n      currentChart=<CO2Emission emission={this.state.emission} />\r\n    } \r\n    if(this.state.isTemp)\r\n    {\r\n      currentChart=<GlobalTemperature emission={this.state.emission} />\r\n    }\r\n    if(this.state.isGlacier)\r\n    {\r\n      currentChart=<GlacierSize emission={this.state.emission} />\r\n    }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n        <Menu co2={this.triggerCO2EmissionState} temp={this.triggerGlobalTemperatureState} glacier={this.triggerGlacierSizeState} />\r\n        {currentChart}\r\n    </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}